# ui.py
"""M√≥dulo de Interfaz de Usuario (Presentation Layer).

Responsable de toda la interacci√≥n visual con el usuario en la consola.
Maneja la impresi√≥n de men√∫s, listas, mensajes y la captura de datos,
utilizando la librer√≠a 'colorama' para mejorar la experiencia.
"""
from colorama import Fore, Style, Back

def mostrar_menu_principal():
    """Imprime el men√∫ principal de la aplicaci√≥n.
    Presenta las opciones disponibles para gestionar productos, categor√≠as,
    generar reportes de stock o salir del programa.
    Args: no tiene
    Returns: no tiene
    """
    print(Fore.CYAN + "\n====== MEN√ö PRINCIPAL ======")
    print("1.üì¶ Gestionar Productos")
    print("2.üìã Gestionar Categor√≠as")
    print("3.üìä Generar Reporte de Stock")
    print("4.üîö Salir del programa")
    print(Fore.CYAN + "==========================\n")

def mostrar_menu_productos():
    """Imprime el submen√∫ de gesti√≥n de productos.
    Presenta las opciones para agregar, modificar, eliminar, buscar o listar productos.
    Args: no tiene
    Returns: no tiene
    """
    print(Fore.CYAN + "\n--- Men√∫ de Productos ---")
    print("1. ‚úÖ Agregar producto")
    print("2. ‚úèÔ∏è Modificar producto")
    print("3. üëÅÔ∏è  Visualizar todos los productos")
    print("4. üîç Buscar producto por ID")
    print("5. ‚ùå Eliminar producto")
    print("6. üîô Volver al men√∫ principal")
    print(Fore.CYAN + "-------------------------\n")

def mostrar_menu_categorias():
    """Imprime el submen√∫ de gesti√≥n de categor√≠as.
    Presenta las opciones para agregar, modificar, eliminar o listar categor√≠as.
    Args: no tiene
    Returns: no tiene
    """
    from colorama import Fore, Style
    print(Fore.CYAN + "\n--- Men√∫ de Categor√≠as ---")
    print("1. ‚úÖ  Agregar categor√≠a")
    print("2. üëÅÔ∏è  Visualizar categor√≠as")
    print("3. ‚úèÔ∏è  Modificar categor√≠a")
    print("4. ‚ùå  Eliminar categor√≠a")
    print("5. üîô Volver al men√∫ principal")
    print(Fore.CYAN + "--------------------------\n")

def mostrar_menu_modificar_producto():
    """Muestra las opciones para modificar un producto.
        Permite al usuario elegir qu√© aspecto del producto desea cambiar:
        nombre, descripci√≥n, cantidad, precio o categor√≠a.      
        Args: no tiene
        Returns: no tiene  """
    
    print(Fore.CYAN + "\n--- ¬øQu√© desea modificar? ---")
    print("1. Nombre")
    print("2. Descripci√≥n")
    print("3. Cantidad en stock")
    print("4. Precio")
    print("5. Categor√≠a")
    print("6. Finalizar modificaci√≥n")
    print(Fore.CYAN + "----------------------------\n")

def obtener_input(mensaje_prompt):
    """Obtiene una entrada del usuario con un estilo consistente.
    Args : mensaje_prompt (str): El mensaje que se mostrar√° al usuario.
    Returns: str: La entrada del usuario, sin espacios al inicio o final.
     
 
    """
    return input(f"{Fore.CYAN}{mensaje_prompt}{Style.RESET_ALL}").strip()

def mostrar_lista_categorias(categorias):
    """Muestra una lista formateada de categor√≠as.
    Args: categorias (list): Lista de tuplas con ID y nombre de categor√≠as.
    Returns:un booleano: True si se mostraron categor√≠as, False si la lista estaba vac√≠a.

    """
    if not categorias:
        mostrar_mensaje_info("No hay categor√≠as registradas.")
        return False
    print(Fore.MAGENTA + "\n--- Categor√≠as Registradas ---")
    for id_cat, nombre in categorias:
        print(f"ID: {id_cat} | Nombre: {nombre}")
    print(Fore.MAGENTA + "----------------------------\n")
    return True

def mostrar_lista_seleccion_con_opcion_nueva(items, texto_opcion_nueva):
    """Muestra una lista de √≠tems numerada y a√±ade una opci√≥n final.

    Args: items (list): Lista de tuplas con ID y nombre de √≠tems.
    texto_opcion_nueva (str): Texto para la opci√≥n de crear un nuevo √≠tem.
    Returns: no tiene
    """
    for i, item in enumerate(items):
        print(f"{Fore.YELLOW}{i + 1}.{Style.RESET_ALL} {item[1]}")
    print(f"{Fore.YELLOW}{len(items) + 1}.{Style.RESET_ALL} {texto_opcion_nueva}")

def mostrar_lista_productos(productos):
    """Muestra una lista formateada de productos con todos sus detalles.
    Args: productos (list): Lista de tuplas con detalles del producto.
    Formato de cada tupla: (id, nombre, descripcion, cantidad, precio, nombre_categoria).
    Returns: un booleano: True si se mostraron productos, False si la lista estaba vac√≠a.   
    """
    if not productos:
        mostrar_mensaje_info(" No hay productos registrados.")
        return False
    print(Fore.MAGENTA + "\n--- Productos Registrados ---")
    for id_prod, nombre, desc, cant, precio, cat in productos:
        print(f"{Fore.YELLOW}ID: {Style.RESET_ALL}{id_prod} | "
              f"{Fore.YELLOW}Nombre: {Style.RESET_ALL}{nombre} | "
              f"{Fore.YELLOW}Descripci√≥n: {Style.RESET_ALL}{desc} | "
              f"{Fore.YELLOW}Cantidad: {Style.RESET_ALL}{cant} | "
              f"{Fore.YELLOW}Precio: {Style.RESET_ALL}${precio} | "
              f"{Fore.YELLOW}Categor√≠a: {Style.RESET_ALL}{cat}")
    print(Fore.MAGENTA + "---------------------------\n")
    return True

def mostrar_reporte_stock(productos, limite):
    """Muestra un reporte formateado de productos con stock bajo.

    Args: productos (list): Lista de tuplas con detalles del producto.
    Formato de cada tupla: (id, nombre, descripcion, cantidad, precio, nombre_categoria).
    limite (int): El l√≠mite de cantidad para considerar un producto como "bajo stock".
    Returns: no tiene
    """
    if not productos:
        mostrar_mensaje_info(f"No hay productos con una cantidad igual o inferior a {limite}.")
        return
    print(Fore.RED + f"\n--- REPORTE: PRODUCTOS CON STOCK BAJO (<= {limite}) ---")
    for id_prod, nombre, desc, cant, precio, cat in productos:
         print(f"{Fore.YELLOW}Nombre: {Style.RESET_ALL}{nombre} | "
              f"{Back.RED}{Style.BRIGHT}Cantidad: {cant}{Style.RESET_ALL} | "
              f"{Fore.YELLOW}ID: {Style.RESET_ALL}{id_prod} | "
              f"{Fore.YELLOW}Categor√≠a: {Style.RESET_ALL}{cat}")
    print(Fore.RED + "--------------------------------------------------\n")

def mostrar_mensaje_exito(mensaje):
    """Muestra un mensaje de √©xito con formato.
    Args: mensaje (str): El texto del mensaje de √©xito a mostrar.
    Returns: no tiene
    """
    print(Fore.GREEN + f"‚úÖ {mensaje}")

def mostrar_mensaje_error(mensaje):
    """Muestra un mensaje de error resaltado.
    Args: mensaje (str): El texto del mensaje de error a mostrar.
    Returns: no tiene
    """
    print(f"{Back.WHITE}{Fore.RED}{Style.BRIGHT}‚ùå {mensaje}{Style.RESET_ALL}")

def mostrar_mensaje_info(mensaje):
    """Muestra un mensaje informativo con formato.
    Args: mensaje (str): El texto del mensaje informativo a mostrar.
    Returns: no tiene
    """
    print(Fore.YELLOW + f"‚ÑπÔ∏è {mensaje}") 